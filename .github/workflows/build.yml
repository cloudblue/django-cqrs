name: Build Django CQRS

on:
  push:
    branches: "*"
    tags:
      - '*'

  pull_request:
    branches: [ master ]

jobs:
  build_3_6_7_8_django_2_2:
    name: Build on Python 3.7, 3.8 and django 2.2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8']
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/test.txt
        pip install pytest-cov
        pip install djangorestframework==3.13.*
        pip install django-model-utils==4.2.0
        pip install django==2.2.*
    - name: Linting
      run: |
        flake8
    - name: Testing
      run: |
        python setup.py test
  build_3_8_9_10_django_3_2:
    name: Build on Python 3.8, 3.9, 3.10 django 3.2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install -r requirements/test.txt
          pip install pytest-cov
          pip install django==3.2.*
      - name: Linting
        run: |
          flake8
      - name: Testing
        run: |
          python setup.py test
  build_3_10_django_4_0:
    name: Build on Python 3.10 django 4.0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install -r requirements/test.txt
          pip install pytest-cov
          pip install django==4.0.*
      - name: Linting
        run: |
          flake8
      - name: Testing
        run: |
          python setup.py test
  sonar:
    name: Sonar Checks
    needs: [build_3_6_7_8_django_2_2, build_3_8_9_10_django_3_2, build_3_10_django_4_0]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python '3.10'
        uses: actions/setup-python@v2
        with:
          python-version: ['3.10']
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install -r requirements/test.txt
          pip install pytest-cov
          pip install django==4.0.*
      - name: Testing
        run: |
          python setup.py test
      - name: Fix coverage report for Sonar
        run: |
          sed -i 's/\/home\/runner\/work\/django-cqrs\/django-cqrs\//\/github\/workspace\//g' coverage.xml
      - name: SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Wait sonar to process report
        uses: jakejarvis/wait-action@master
        with:
          time: '15s'
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  compatibility:
    name: Compatibility and Integration Tests
    needs: [sonar]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python '3.10'
        uses: actions/setup-python@v2
        with:
          python-version: ['3.10']
      - name: Integration tests
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          INTEGRATION_TESTS: yes
        run: |
          ./travis_integration_tests.sh
      - name: Compatibility tests
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          COMPAT_TESTS: yes
        run: |
          ./travis_compat_tests.sh